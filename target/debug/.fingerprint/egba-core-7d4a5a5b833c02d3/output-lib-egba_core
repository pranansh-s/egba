{"$message_type":"diagnostic","message":"unused variable: `addr`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/bus.rs","byte_start":108,"byte_end":112,"line_start":6,"line_end":6,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    fn write_byte(&mut self, addr: u32, value: u8) {}","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"egba-core/src/bus.rs","byte_start":108,"byte_end":112,"line_start":6,"line_end":6,"column_start":30,"column_end":34,"is_primary":true,"text":[{"text":"    fn write_byte(&mut self, addr: u32, value: u8) {}","highlight_start":30,"highlight_end":34}],"label":null,"suggested_replacement":"_addr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `addr`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/bus.rs:6:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_byte(&mut self, addr: u32, value: u8) {}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_addr`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/bus.rs","byte_start":119,"byte_end":124,"line_start":6,"line_end":6,"column_start":41,"column_end":46,"is_primary":true,"text":[{"text":"    fn write_byte(&mut self, addr: u32, value: u8) {}","highlight_start":41,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"egba-core/src/bus.rs","byte_start":119,"byte_end":124,"line_start":6,"line_end":6,"column_start":41,"column_end":46,"is_primary":true,"text":[{"text":"    fn write_byte(&mut self, addr: u32, value: u8) {}","highlight_start":41,"highlight_end":46}],"label":null,"suggested_replacement":"_value","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `value`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/bus.rs:6:41\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn write_byte(&mut self, addr: u32, value: u8) {}\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_value`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `rom` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cartridge/mod.rs","byte_start":64,"byte_end":73,"line_start":5,"line_end":5,"column_start":12,"column_end":21,"is_primary":false,"text":[{"text":"pub struct Cartridge {","highlight_start":12,"highlight_end":21}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"egba-core/src/cartridge/mod.rs","byte_start":80,"byte_end":83,"line_start":6,"line_end":6,"column_start":5,"column_end":8,"is_primary":true,"text":[{"text":"    rom: Rom,","highlight_start":5,"highlight_end":8}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `rom` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cartridge/mod.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Cartridge {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    rom: Rom,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `skip_bios` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/bios.rs","byte_start":59,"byte_end":63,"line_start":3,"line_end":3,"column_start":12,"column_end":16,"is_primary":false,"text":[{"text":"pub struct Bios {","highlight_start":12,"highlight_end":16}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"egba-core/src/bios.rs","byte_start":84,"byte_end":93,"line_start":5,"line_end":5,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    skip_bios: bool,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `skip_bios` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/bios.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Bios {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    rom: Rom,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    skip_bios: bool,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `InterruptControl` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":11,"byte_end":27,"line_start":1,"line_end":1,"column_start":12,"column_end":28,"is_primary":true,"text":[{"text":"pub struct InterruptControl {","highlight_start":12,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `InterruptControl` is never constructed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct InterruptControl {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"struct `Interrupt` is never constructed","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":121,"byte_end":130,"line_start":7,"line_end":7,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"pub struct Interrupt {","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: struct `Interrupt` is never constructed\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:7:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Interrupt {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"field `cartridge` is never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/memory.rs","byte_start":69,"byte_end":75,"line_start":3,"line_end":3,"column_start":12,"column_end":18,"is_primary":false,"text":[{"text":"pub struct Memory {","highlight_start":12,"highlight_end":18}],"label":"field in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"egba-core/src/memory.rs","byte_start":216,"byte_end":225,"line_start":8,"line_end":8,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    pub(crate) cartridge: Cartridge,","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: field `cartridge` is never read\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/memory.rs:8:16\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct Memory {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfield in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) cartridge: Cartridge,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `AND` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":234,"byte_end":237,"line_start":12,"line_end":12,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn AND(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":234,"byte_end":237,"line_start":12,"line_end":12,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn AND(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"and","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `AND` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:12:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn AND(&mut self, op: u32, op2: u32) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `and`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `EOR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":312,"byte_end":315,"line_start":16,"line_end":16,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn EOR(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":312,"byte_end":315,"line_start":16,"line_end":16,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn EOR(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"eor","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `EOR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:16:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn EOR(&mut self, op: u32, op2: u32) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `eor`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `SUB` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":390,"byte_end":393,"line_start":20,"line_end":20,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn SUB(&mut self, op: u32, op2: u32, update_cpsr: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":390,"byte_end":393,"line_start":20,"line_end":20,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn SUB(&mut self, op: u32, op2: u32, update_cpsr: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"sub","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `SUB` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:20:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn SUB(&mut self, op: u32, op2: u32, update_cpsr: bool) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `sub`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `ADD` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":691,"byte_end":694,"line_start":30,"line_end":30,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ADD(&mut self, op: u32, op2: u32, update_cpsr: bool) ->  u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":691,"byte_end":694,"line_start":30,"line_end":30,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ADD(&mut self, op: u32, op2: u32, update_cpsr: bool) ->  u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"add","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `ADD` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:30:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn ADD(&mut self, op: u32, op2: u32, update_cpsr: bool) ->  u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `add`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `ADC` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1027,"byte_end":1030,"line_start":40,"line_end":40,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ADC(&mut self, op: u32, op2: u32, update_cpsr: bool, carry: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1027,"byte_end":1030,"line_start":40,"line_end":40,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ADC(&mut self, op: u32, op2: u32, update_cpsr: bool, carry: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"adc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `ADC` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:40:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn ADC(&mut self, op: u32, op2: u32, update_cpsr: bool, carry: bool) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `adc`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `SBC` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1449,"byte_end":1452,"line_start":50,"line_end":50,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn SBC(&mut self, op: u32, op2: u32, update_cpsr: bool, carry: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1449,"byte_end":1452,"line_start":50,"line_end":50,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn SBC(&mut self, op: u32, op2: u32, update_cpsr: bool, carry: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"sbc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `SBC` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:50:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn SBC(&mut self, op: u32, op2: u32, update_cpsr: bool, carry: bool) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `sbc`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `ORR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1876,"byte_end":1879,"line_start":60,"line_end":60,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ORR(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1876,"byte_end":1879,"line_start":60,"line_end":60,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ORR(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"orr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `ORR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:60:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m60\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn ORR(&mut self, op: u32, op2: u32) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `orr`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `MOV` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1954,"byte_end":1957,"line_start":64,"line_end":64,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn MOV(&mut self, op: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":1954,"byte_end":1957,"line_start":64,"line_end":64,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn MOV(&mut self, op: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"mov","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `MOV` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:64:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn MOV(&mut self, op: u32) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `mov`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `BIC` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":2016,"byte_end":2019,"line_start":68,"line_end":68,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn BIC(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":2016,"byte_end":2019,"line_start":68,"line_end":68,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn BIC(&mut self, op: u32, op2: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"bic","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `BIC` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:68:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn BIC(&mut self, op: u32, op2: u32) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `bic`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `MVN` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":2095,"byte_end":2098,"line_start":72,"line_end":72,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn MVN(&mut self, op: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/alu.rs","byte_start":2095,"byte_end":2098,"line_start":72,"line_end":72,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn MVN(&mut self, op: u32) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"mvn","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `MVN` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/alu.rs:72:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m72\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn MVN(&mut self, op: u32) -> u32 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `mvn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `set_NZ` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":2000,"byte_end":2006,"line_start":75,"line_end":75,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn set_NZ(&mut self, val: u32) {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":2000,"byte_end":2006,"line_start":75,"line_end":75,"column_start":12,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn set_NZ(&mut self, val: u32) {","highlight_start":12,"highlight_end":18}],"label":null,"suggested_replacement":"set_nz","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `set_NZ` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/mod.rs:75:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m75\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_NZ(&mut self, val: u32) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `set_nz`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `set_NZ_64` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":2143,"byte_end":2152,"line_start":80,"line_end":80,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"    pub fn set_NZ_64(&mut self, val: u64) {","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":2143,"byte_end":2152,"line_start":80,"line_end":80,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"    pub fn set_NZ_64(&mut self, val: u64) {","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":"set_nz_64","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `set_NZ_64` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/mod.rs:80:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn set_NZ_64(&mut self, val: u64) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `set_nz_64`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `ASR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":3025,"byte_end":3028,"line_start":106,"line_end":106,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn ASR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":3025,"byte_end":3028,"line_start":106,"line_end":106,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn ASR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":"asr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `ASR` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/mod.rs:106:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn ASR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `asr`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `LSL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":3636,"byte_end":3639,"line_start":126,"line_end":126,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn LSL(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":3636,"byte_end":3639,"line_start":126,"line_end":126,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn LSL(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":"lsl","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `LSL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/mod.rs:126:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn LSL(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `lsl`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `LSR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":4298,"byte_end":4301,"line_start":150,"line_end":150,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn LSR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":4298,"byte_end":4301,"line_start":150,"line_end":150,"column_start":8,"column_end":11,"is_primary":true,"text":[{"text":"    fn LSR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":8,"highlight_end":11}],"label":null,"suggested_replacement":"lsr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `LSR` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/mod.rs:150:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m150\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn LSR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `lsr`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `ROR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":4964,"byte_end":4967,"line_start":174,"line_end":174,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ROR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/mod.rs","byte_start":4964,"byte_end":4967,"line_start":174,"line_end":174,"column_start":12,"column_end":15,"is_primary":true,"text":[{"text":"    pub fn ROR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {","highlight_start":12,"highlight_end":15}],"label":null,"suggested_replacement":"ror","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `ROR` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/mod.rs:174:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn ROR(&mut self, value: u32, rot: u8, set_condition: bool) -> u32 {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `ror`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_BX` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":3455,"byte_end":3461,"line_start":43,"line_end":43,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_BX(&mut self, bus: &mut impl Bus, rn: usize) {","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":3455,"byte_end":3461,"line_start":43,"line_end":43,"column_start":19,"column_end":25,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_BX(&mut self, bus: &mut impl Bus, rn: usize) {","highlight_start":19,"highlight_end":25}],"label":null,"suggested_replacement":"arm_bx","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_BX` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:43:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) fn arm_BX(&mut self, bus: &mut impl Bus, rn: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_bx`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_B` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":3770,"byte_end":3775,"line_start":53,"line_end":53,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn arm_B(&mut self, bus: &mut impl Bus, offset: usize) {","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":3770,"byte_end":3775,"line_start":53,"line_end":53,"column_start":8,"column_end":13,"is_primary":true,"text":[{"text":"    fn arm_B(&mut self, bus: &mut impl Bus, offset: usize) {","highlight_start":8,"highlight_end":13}],"label":null,"suggested_replacement":"arm_b","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_B` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:53:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_B(&mut self, bus: &mut impl Bus, offset: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_b`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_BL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":3999,"byte_end":4005,"line_start":59,"line_end":59,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn arm_BL(&mut self, bus: &mut impl Bus, offset: usize) {","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":3999,"byte_end":4005,"line_start":59,"line_end":59,"column_start":8,"column_end":14,"is_primary":true,"text":[{"text":"    fn arm_BL(&mut self, bus: &mut impl Bus, offset: usize) {","highlight_start":8,"highlight_end":14}],"label":null,"suggested_replacement":"arm_bl","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_BL` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:59:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m59\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_BL(&mut self, bus: &mut impl Bus, offset: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_bl`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_MRS` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":4290,"byte_end":4297,"line_start":66,"line_end":66,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MRS(&mut self, p: bool, rd: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":4290,"byte_end":4297,"line_start":66,"line_end":66,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MRS(&mut self, p: bool, rd: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":"arm_mrs","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_MRS` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:66:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m66\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_MRS(&mut self, p: bool, rd: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_mrs`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_MSR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":4495,"byte_end":4502,"line_start":76,"line_end":76,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MSR(&mut self, i: bool, p: bool, f: bool, op: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":4495,"byte_end":4502,"line_start":76,"line_end":76,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MSR(&mut self, i: bool, p: bool, f: bool, op: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":"arm_msr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_MSR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:76:8\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m76\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_MSR(&mut self, i: bool, p: bool, f: bool, op: usize) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_msr`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_LDR_STR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":7003,"byte_end":7014,"line_start":145,"line_end":145,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_LDR_STR(&mut self, bus: &mut impl Bus, l: bool, i: bool, p: bool, u: bool, b: bool, w: bool, rn: usize, rd: usize, offset: usize) {","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":7003,"byte_end":7014,"line_start":145,"line_end":145,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_LDR_STR(&mut self, bus: &mut impl Bus, l: bool, i: bool, p: bool, u: bool, b: bool, w: bool, rn: usize, rd: usize, offset: usize) {","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":"arm_ldr_str","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_LDR_STR` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:145:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) fn arm_LDR_STR(&mut self, bus: &mut impl Bus, l: bool, i: bool, p: bool, u: bool, b: bool, w: bool, rn: usize, rd: usize, \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_ldr_str`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_LDRH_LDRSB_LDRSH_STRH` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":8541,"byte_end":8566,"line_start":199,"line_end":199,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_LDRH_LDRSB_LDRSH_STRH(&mut self, bus: &mut impl Bus, p: bool, u: bool, i: bool, w: bool, l: bool, rn: usize, rd: usize, offset_hi: usize, s: bool, h: bool, offset_lo: usize) {","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":8541,"byte_end":8566,"line_start":199,"line_end":199,"column_start":19,"column_end":44,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_LDRH_LDRSB_LDRSH_STRH(&mut self, bus: &mut impl Bus, p: bool, u: bool, i: bool, w: bool, l: bool, rn: usize, rd: usize, offset_hi: usize, s: bool, h: bool, offset_lo: usize) {","highlight_start":19,"highlight_end":44}],"label":null,"suggested_replacement":"arm_ldrh_ldrsb_ldrsh_strh","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_LDRH_LDRSB_LDRSH_STRH` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:199:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m199\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) fn arm_LDRH_LDRSB_LDRSH_STRH(&mut self, bus: &mut impl Bus, p: bool, u: bool, i: bool, w: bool, l: bool, rn: usize, rd: us\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_ldrh_ldrsb_ldrsh_strh`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_LDM_STM` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":9904,"byte_end":9915,"line_start":240,"line_end":240,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_LDM_STM(&mut self, bus: &mut impl Bus, l: bool, p: bool, u: bool, s: bool, w: bool, rn: usize, r_list: u16) {","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":9904,"byte_end":9915,"line_start":240,"line_end":240,"column_start":19,"column_end":30,"is_primary":true,"text":[{"text":"    pub(crate) fn arm_LDM_STM(&mut self, bus: &mut impl Bus, l: bool, p: bool, u: bool, s: bool, w: bool, rn: usize, r_list: u16) {","highlight_start":19,"highlight_end":30}],"label":null,"suggested_replacement":"arm_ldm_stm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_LDM_STM` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:240:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m240\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) fn arm_LDM_STM(&mut self, bus: &mut impl Bus, l: bool, p: bool, u: bool, s: bool, w: bool, rn: usize, r_list: u16) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_ldm_stm`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_MUL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":11737,"byte_end":11744,"line_start":291,"line_end":291,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MUL(&mut self, s: bool, rd: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":11737,"byte_end":11744,"line_start":291,"line_end":291,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MUL(&mut self, s: bool, rd: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":"arm_mul","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_MUL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:291:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_MUL(&mut self, s: bool, rd: usize, rs: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_mul`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_MLA` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":11969,"byte_end":11976,"line_start":300,"line_end":300,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MLA(&mut self, s: bool, rd: usize, rn: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":11969,"byte_end":11976,"line_start":300,"line_end":300,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_MLA(&mut self, s: bool, rd: usize, rn: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":"arm_mla","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_MLA` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:300:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m300\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_MLA(&mut self, s: bool, rd: usize, rn: usize, rs: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_mla`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_UMULL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":12247,"byte_end":12256,"line_start":309,"line_end":309,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_UMULL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":12247,"byte_end":12256,"line_start":309,"line_end":309,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_UMULL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":"arm_umull","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_UMULL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:309:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m309\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_UMULL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_umull`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_UMLAL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":12575,"byte_end":12584,"line_start":319,"line_end":319,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_UMLAL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":12575,"byte_end":12584,"line_start":319,"line_end":319,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_UMLAL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":"arm_umlal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_UMLAL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:319:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_UMLAL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_umlal`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_SMULL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":12999,"byte_end":13008,"line_start":330,"line_end":330,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_SMULL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":12999,"byte_end":13008,"line_start":330,"line_end":330,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_SMULL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":"arm_smull","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_SMULL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:330:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m330\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_SMULL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_smull`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_SMLAL` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":13348,"byte_end":13357,"line_start":340,"line_end":340,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_SMLAL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":13348,"byte_end":13357,"line_start":340,"line_end":340,"column_start":8,"column_end":17,"is_primary":true,"text":[{"text":"    fn arm_SMLAL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {","highlight_start":8,"highlight_end":17}],"label":null,"suggested_replacement":"arm_smlal","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_SMLAL` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:340:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m340\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_SMLAL(&mut self, s: bool, rd_hi: usize, rd_lo: usize, rs: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_smlal`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"method `arm_SWP` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":13795,"byte_end":13802,"line_start":351,"line_end":351,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_SWP(&mut self, bus: &mut impl Bus, b: bool, rn: usize, rd: usize, rm: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/cpu/modes/arm.rs","byte_start":13795,"byte_end":13802,"line_start":351,"line_end":351,"column_start":8,"column_end":15,"is_primary":true,"text":[{"text":"    fn arm_SWP(&mut self, bus: &mut impl Bus, b: bool, rn: usize, rd: usize, rm: usize) {","highlight_start":8,"highlight_end":15}],"label":null,"suggested_replacement":"arm_swp","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: method `arm_SWP` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/cpu/modes/arm.rs:351:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn arm_SWP(&mut self, bus: &mut impl Bus, b: bool, rn: usize, rd: usize, rm: usize) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `arm_swp`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `VBlank` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":137,"byte_end":143,"line_start":8,"line_end":8,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    VBlank: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":137,"byte_end":143,"line_start":8,"line_end":8,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    VBlank: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"vblank","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `VBlank` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    VBlank: bool,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `vblank`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `HBlank` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":155,"byte_end":161,"line_start":9,"line_end":9,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    HBlank: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":155,"byte_end":161,"line_start":9,"line_end":9,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    HBlank: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"hblank","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `HBlank` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    HBlank: bool,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `hblank`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `VCounter` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":173,"byte_end":181,"line_start":10,"line_end":10,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    VCounter: bool,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":173,"byte_end":181,"line_start":10,"line_end":10,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    VCounter: bool,","highlight_start":5,"highlight_end":13}],"label":null,"suggested_replacement":"vcounter","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `VCounter` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    VCounter: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `vcounter`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Timer0` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":193,"byte_end":199,"line_start":11,"line_end":11,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer0: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":193,"byte_end":199,"line_start":11,"line_end":11,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer0: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"timer0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Timer0` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Timer0: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `timer0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Timer1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":211,"byte_end":217,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer1: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":211,"byte_end":217,"line_start":12,"line_end":12,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer1: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"timer1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Timer1` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Timer1: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `timer1`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Timer2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":229,"byte_end":235,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer2: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":229,"byte_end":235,"line_start":13,"line_end":13,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer2: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"timer2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Timer2` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Timer2: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `timer2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Timer3` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":247,"byte_end":253,"line_start":14,"line_end":14,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer3: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":247,"byte_end":253,"line_start":14,"line_end":14,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Timer3: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"timer3","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Timer3` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Timer3: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `timer3`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Serial` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":265,"byte_end":271,"line_start":15,"line_end":15,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Serial: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":265,"byte_end":271,"line_start":15,"line_end":15,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Serial: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"serial","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Serial` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:15:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Serial: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `serial`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `DMA0` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":283,"byte_end":287,"line_start":16,"line_end":16,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA0: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":283,"byte_end":287,"line_start":16,"line_end":16,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA0: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":"dma0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `DMA0` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DMA0: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `dma0`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `DMA1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":299,"byte_end":303,"line_start":17,"line_end":17,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA1: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":299,"byte_end":303,"line_start":17,"line_end":17,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA1: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":"dma1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `DMA1` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DMA1: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `dma1`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `DMA2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":315,"byte_end":319,"line_start":18,"line_end":18,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA2: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":315,"byte_end":319,"line_start":18,"line_end":18,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA2: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":"dma2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `DMA2` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DMA2: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `dma2`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `DMA3` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":331,"byte_end":335,"line_start":19,"line_end":19,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA3: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":331,"byte_end":335,"line_start":19,"line_end":19,"column_start":5,"column_end":9,"is_primary":true,"text":[{"text":"    DMA3: bool,","highlight_start":5,"highlight_end":9}],"label":null,"suggested_replacement":"dma3","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `DMA3` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    DMA3: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `dma3`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Keypad` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":347,"byte_end":353,"line_start":20,"line_end":20,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Keypad: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":347,"byte_end":353,"line_start":20,"line_end":20,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"    Keypad: bool,","highlight_start":5,"highlight_end":11}],"label":null,"suggested_replacement":"keypad","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Keypad` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Keypad: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `keypad`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"structure field `Cartridge` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":365,"byte_end":374,"line_start":21,"line_end":21,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    Cartridge: bool,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"egba-core/src/interrupt.rs","byte_start":365,"byte_end":374,"line_start":21,"line_end":21,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    Cartridge: bool,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"cartridge","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `Cartridge` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0megba-core/src/interrupt.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Cartridge: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `cartridge`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"52 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 52 warnings emitted\u001b[0m\n\n"}
